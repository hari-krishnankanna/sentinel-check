import "tfplan/v2" as tfplan

# Define the allowed VM size
allowed_vm_size = "Standard_DS1_v2"

# Filter to get all managed Linux and Windows virtual machines
allVirtualMachines = filter tfplan.resource_changes as _, resource_changes {
	resource_changes.type is "azurerm_linux_virtual_machine" or
	resource_changes.type is "azurerm_windows_virtual_machine" and
	resource_changes.mode is "managed" and
	(resource_changes.change.actions contains "create" or
		resource_changes.change.actions is ["update"])
}

# Function to check compliance of VM sizes
getVmSizeCompliance = func(vms) {
	nonCompliantVMs = []
	for vms as _, vm {
		# Check if the VM has the 'size' key and validate its value
		if keys(vm.change.after) contains "size" {
			vmSize = vm.change.after.size
			if vmSize is not allowed_vm_size {
				nonCompliantVMs = nonCompliantVMs + [vm]
			}
		}
	}
	return length(nonCompliantVMs)
}

// Ensure that only the allowed VM size is used when creating or updating VMs.
main = rule {
	getVmSizeCompliance(allVirtualMachines) == 0
}
